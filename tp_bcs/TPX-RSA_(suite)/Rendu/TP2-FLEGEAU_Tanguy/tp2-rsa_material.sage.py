

# This file was *autogenerated* from the file ../TP2/tp2-rsa_material.sage
from sage.all_cmdline import *   # import sage library
# import totient() method from sympy 
from sympy import * 

_sage_const_2 = Integer(2); _sage_const_16 = Integer(16); _sage_const_1 = Integer(1); _sage_const_0xd2a0399be4db182811c7b222c374360e684f5693f835f2477d5e1696e368f7efc1c03a4aeec85b9753a70d2db4e85623293852fa54de24bd1dbdb490af5e5fcc67777f6f1e3823e2db06c071e0b9cf44a6e8c26d10026fe5a58dfa27fe02eda5bbda5f1bf227de2741753d7cef849d054622dee7a2cf45297bffeeb1212cc9e5a23bf68b6e761a5b0342944eb208a64baad7830afc368b5da7d8b34246a880db3c8c7b11f8c014ecbdd8e7c577c2edb162231e0853a619adfb8159660c956fca3d91ceb44e7ad1aed74905bddddcdb46a8e50c339eb3bdedb2cf5276433bf7df47d06c2af42c0ef3905743bdc2dc7dff3bed96de977c3dda28f2fb17e02744c1 = Integer(0xd2a0399be4db182811c7b222c374360e684f5693f835f2477d5e1696e368f7efc1c03a4aeec85b9753a70d2db4e85623293852fa54de24bd1dbdb490af5e5fcc67777f6f1e3823e2db06c071e0b9cf44a6e8c26d10026fe5a58dfa27fe02eda5bbda5f1bf227de2741753d7cef849d054622dee7a2cf45297bffeeb1212cc9e5a23bf68b6e761a5b0342944eb208a64baad7830afc368b5da7d8b34246a880db3c8c7b11f8c014ecbdd8e7c577c2edb162231e0853a619adfb8159660c956fca3d91ceb44e7ad1aed74905bddddcdb46a8e50c339eb3bdedb2cf5276433bf7df47d06c2af42c0ef3905743bdc2dc7dff3bed96de977c3dda28f2fb17e02744c1); _sage_const_0x3af0ce642453b6e91a56cc6a105a7b3890e83e4c2830ac3b98c170c3b6caa629a155bd0e6e419f3d07d4e285c69e483dbc2abbaa80f080bdf883ce6cd76a95e2ee302a7b766bffd3afa50ad66333f5faa1f78b12f018b30394843b8d000f956f74982af3fbe4ac51aedd71899a7942cd5a7b6ce6dbfebfa4eac2b7a8b38852d5639bd5902d2ff3f2ecb06ff74414f86b571ab069b3510567e7fd356a73a70c9c41d675623510ad51024c03b1a97131c18dd6fcd393bb14657258cb86123f4651bc257d7db2e09d8e40a17fdbb327bb803155f6904ae258f457d504984dd3614bf5e2237f3114fe93633bf7a630dc6777a5f7199a0f6c82fabf5f29965adc2b5d = Integer(0x3af0ce642453b6e91a56cc6a105a7b3890e83e4c2830ac3b98c170c3b6caa629a155bd0e6e419f3d07d4e285c69e483dbc2abbaa80f080bdf883ce6cd76a95e2ee302a7b766bffd3afa50ad66333f5faa1f78b12f018b30394843b8d000f956f74982af3fbe4ac51aedd71899a7942cd5a7b6ce6dbfebfa4eac2b7a8b38852d5639bd5902d2ff3f2ecb06ff74414f86b571ab069b3510567e7fd356a73a70c9c41d675623510ad51024c03b1a97131c18dd6fcd393bb14657258cb86123f4651bc257d7db2e09d8e40a17fdbb327bb803155f6904ae258f457d504984dd3614bf5e2237f3114fe93633bf7a630dc6777a5f7199a0f6c82fabf5f29965adc2b5d); _sage_const_150 = Integer(150); _sage_const_0x7db7520e7eafe6b649919a766295a8c582d5a1492e754696a05035b492cc6b0180c9b741282137c674121f40c74a85edbd3d25c795f065db3a2de0d005b9a4f4e0cf6f37aa200f206fb870ef6f3cefe456c655ae3f61272d927955ab74b3c4fad8cd0d5c68d9c14e8a2b86443524b82a03691014df1a4ea48ff5dc8c74f5b5e406e36f62bb97dd5db44fa522ee0d05a194d = Integer(0x7db7520e7eafe6b649919a766295a8c582d5a1492e754696a05035b492cc6b0180c9b741282137c674121f40c74a85edbd3d25c795f065db3a2de0d005b9a4f4e0cf6f37aa200f206fb870ef6f3cefe456c655ae3f61272d927955ab74b3c4fad8cd0d5c68d9c14e8a2b86443524b82a03691014df1a4ea48ff5dc8c74f5b5e406e36f62bb97dd5db44fa522ee0d05a194d); _sage_const_0x175335d7d9c6b204ccca4c90b43b3817acc7fa3ec259e999c4c30baf65b8187424f3fc14a7ed45961cac716a539ba1cbe1afbdb773dac45df1d264c21e9a13ef88b7339672e42e86a2c20507ed0813a0a742936f5246e04e6ed0edcfae3555629f4d0b460659a0fe9de5a2d1cbb849adacb1d29e2ded2d214923bd68e4c67b5927540dde12f0d1807d4665b59d8bab37c13 = Integer(0x175335d7d9c6b204ccca4c90b43b3817acc7fa3ec259e999c4c30baf65b8187424f3fc14a7ed45961cac716a539ba1cbe1afbdb773dac45df1d264c21e9a13ef88b7339672e42e86a2c20507ed0813a0a742936f5246e04e6ed0edcfae3555629f4d0b460659a0fe9de5a2d1cbb849adacb1d29e2ded2d214923bd68e4c67b5927540dde12f0d1807d4665b59d8bab37c13)
from binascii import unhexlify

def int_to_ascii(x):
	return unhexlify(hex(x)[_sage_const_2 :])

e = pow(_sage_const_2 , _sage_const_16 ) + _sage_const_1 

#Exercice 1

# Variables for exercice 1.1
n1 = _sage_const_0xd2a0399be4db182811c7b222c374360e684f5693f835f2477d5e1696e368f7efc1c03a4aeec85b9753a70d2db4e85623293852fa54de24bd1dbdb490af5e5fcc67777f6f1e3823e2db06c071e0b9cf44a6e8c26d10026fe5a58dfa27fe02eda5bbda5f1bf227de2741753d7cef849d054622dee7a2cf45297bffeeb1212cc9e5a23bf68b6e761a5b0342944eb208a64baad7830afc368b5da7d8b34246a880db3c8c7b11f8c014ecbdd8e7c577c2edb162231e0853a619adfb8159660c956fca3d91ceb44e7ad1aed74905bddddcdb46a8e50c339eb3bdedb2cf5276433bf7df47d06c2af42c0ef3905743bdc2dc7dff3bed96de977c3dda28f2fb17e02744c1 
c1 = _sage_const_0x3af0ce642453b6e91a56cc6a105a7b3890e83e4c2830ac3b98c170c3b6caa629a155bd0e6e419f3d07d4e285c69e483dbc2abbaa80f080bdf883ce6cd76a95e2ee302a7b766bffd3afa50ad66333f5faa1f78b12f018b30394843b8d000f956f74982af3fbe4ac51aedd71899a7942cd5a7b6ce6dbfebfa4eac2b7a8b38852d5639bd5902d2ff3f2ecb06ff74414f86b571ab069b3510567e7fd356a73a70c9c41d675623510ad51024c03b1a97131c18dd6fcd393bb14657258cb86123f4651bc257d7db2e09d8e40a17fdbb327bb803155f6904ae258f457d504984dd3614bf5e2237f3114fe93633bf7a630dc6777a5f7199a0f6c82fabf5f29965adc2b5d 

# Use totient() method for Euler totient function or phi(n)
#I did this before realising there is the library simpy that does it in one line
#L = []
#for n in range(1, 21):
#    if gcd(n, 20) == 1:
#        L.append(n)

totient_n = totient(n1) 
print("phi(n1) = ", totient_n)

#Recover private Key
privateK = mod_inverse(pow(2, 16)+1, totient_n) #this mod_inverse also use Extended Euclid Algo
print('privateK for n1:', privateK)

#Recover message
print("Plain text for c1:",int_to_ascii(power_mod(c1, privateK, n1)))

# Variable for exercice 1.2
B = _sage_const_150  # Bound for Pollard p-1 algorithm
n2 = _sage_const_0x7db7520e7eafe6b649919a766295a8c582d5a1492e754696a05035b492cc6b0180c9b741282137c674121f40c74a85edbd3d25c795f065db3a2de0d005b9a4f4e0cf6f37aa200f206fb870ef6f3cefe456c655ae3f61272d927955ab74b3c4fad8cd0d5c68d9c14e8a2b86443524b82a03691014df1a4ea48ff5dc8c74f5b5e406e36f62bb97dd5db44fa522ee0d05a194d 
c2 = _sage_const_0x175335d7d9c6b204ccca4c90b43b3817acc7fa3ec259e999c4c30baf65b8187424f3fc14a7ed45961cac716a539ba1cbe1afbdb773dac45df1d264c21e9a13ef88b7339672e42e86a2c20507ed0813a0a742936f5246e04e6ed0edcfae3555629f4d0b460659a0fe9de5a2d1cbb849adacb1d29e2ded2d214923bd68e4c67b5927540dde12f0d1807d4665b59d8bab37c13 

# This function generate prime factors 
def pollard(n): 
	# defining base 
	a = 2
	# defining exponent 
	i = 2

	# iterate till a prime factor is obtained 
	while(True): 
		# recomputing a as required 
		a = (a**i) % n 

		# finding gcd of a-1 and n using math function
		d = math.gcd((a-1), n) 

		# check if factor obtained 
		if (d>1 and d<n): 
			#return the factor 
			return d 
		# else increase exponent by one for next round 
		i += 1

def test_pollard(n):
	# temporarily storing n2 
	num = n 
	
	# list for storing prime factors 
	rop = [] 
	
	# iterated till all prime factors are obtained 
	while(True): 
		# function call 
		d = pollard(num) 

		# factor to list 
		rop.append(d) 
	
		# reduce num 
		r = int(num/d) 
	
		# check for prime using sympy 
		if(isprime(r)): 
			# both prime factors obtained 
			rop.append(r) 
			break
		# reduced num is not prime, so repeat 
		else: 
			num = r
	return rop
  
# print the result 
rop = test_pollard(n2)
print("Prime factors of n2", "are", *rop) 

totient_n = totient(n2) 
print("phi(n2) = ",totient_n)
privateK = mod_inverse(pow(2, 16)+1, totient_n) #this mod_inverse also use Extended Euclid Algo
print('privateK for n2:', privateK)
#Recover message
print("Plain text for c2:",int_to_ascii(power_mod(c2, privateK, n2)))

